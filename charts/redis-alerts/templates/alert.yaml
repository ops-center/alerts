{{ $app := (include "redis-alerts.fullname" .) }}

{{ if (include "redis-alerts.alertsEnabled" .Values.form.alert.enabled) }}
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: {{ $app }}
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- include "redis-alerts.labels" . | nindent 4 }}
{{- if .Values.form.alert.labels }}
    {{- toYaml .Values.form.alert.labels | nindent 4 }}
{{- end }}
{{- if .Values.form.alert.annotations }}
  annotations:
    {{- toYaml .Values.form.alert.annotations | nindent 4 }}
{{- end }}
spec:
  groups:
  {{ with .Values.form.alert.groups.database -}}
  {{ if (include "redis-alerts.alertGroupEnabled" (list $.Values.form.alert.enabled .)) -}}
  - name: redis.database.{{ $.Release.Namespace }}.{{ $app }}.rules
    rules:
    {{ if (include "redis-alerts.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.redisDown.enabled .rules.redisDown.severity)) -}}
    - alert: RedisDown
      expr: redis_up{job="{{- $app -}}-stats",namespace="{{ $.Release.Namespace }}"} == 0
      for: {{ .rules.redisDown.duration }}
      labels:
        severity: {{ .rules.redisDown.severity }}
        {{- include "redis-alerts.alertLabels" $ | nindent 8 }}
      annotations:
        summary: Redis instance down (instance {{`{{`}} $labels.pod {{`}}`}})
        description: "Redis instance is down on {{`{{`}} $labels.pod {{`}}`}}\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{end -}}
    {{ if (include "redis-alerts.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.redisMissingMaster.enabled .rules.redisMissingMaster.severity)) -}}
    - alert: RedisMissingMaster
      expr: (count(redis_instance_info{job="{{- $app -}}-stats",namespace="{{ $.Release.Namespace }}"}) or vector(0)) < {{.rules.redisMissingMaster.val}}
      for: {{ .rules.redisMissingMaster.duration }}
      labels:
        severity: {{ .rules.redisMissingMaster.severity }}
        {{- include "redis-alerts.alertLabels" $ | nindent 8 }}
      annotations:
        summary: Redis missing master (instance {{`{{`}} $labels.pod {{`}}`}})
        description: "Redis cluster has less than expected amount of node marked as master\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{end -}}
    {{ if (include "redis-alerts.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.redisTooManyConnections.enabled .rules.redisTooManyConnections.severity)) -}}
    - alert: RedisTooManyConnections
      expr: redis_connected_clients{job="{{- $app -}}-stats",namespace="{{ $.Release.Namespace }}"} > {{.rules.redisTooManyConnections.val}}
      for: {{ .rules.redisTooManyConnections.duration }}
      labels:
        severity: {{ .rules.redisTooManyConnections.severity }}
        {{- include "redis-alerts.alertLabels" $ | nindent 8 }}
      annotations:
        summary: Redis too many connections (instance {{`{{`}} $labels.pod {{`}}`}})
        description: "Redis instance has too many connections . More than {{.rules.redisTooManyConnections.val}} of Redis connections are in use on {{`{{`}} $labels.pod {{`}}`}}\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "redis-alerts.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.redisTooManyMasters.enabled .rules.redisTooManyMasters.severity)) -}}
    - alert: RedisTooManyMasters
      expr: (count(redis_instance_info{job="{{- $app -}}-stats",namespace="{{ $.Release.Namespace }}"})) > {{.rules.redisTooManyMasters.val}}
      for: {{ .rules.redisTooManyMasters.duration }}
      labels:
        severity: {{ .rules.redisTooManyMasters.severity }}
        {{- include "redis-alerts.alertLabels" $ | nindent 8 }}
      annotations:
        summary: Redis too many master nodes (instance {{`{{`}} $labels.pod {{`}}`}})
        description: "Redis cluster has too many nodes marked as master. \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "redis-alerts.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.redisDisconnectedSlaves.enabled .rules.redisDisconnectedSlaves.severity)) -}}
    - alert: RedisDisconnectedSlaves
      expr: count without (instance) (redis_connected_slaves{job="{{- $app -}}-stats",namespace="{{ $.Release.Namespace }}"}) - sum without (instance) (redis_connected_slaves{job="{{- $app -}}-stats",namespace="{{ $.Release.Namespace }}"}) - 1 > {{.rules.redisDisconnectedSlaves.val}}
      for: {{ .rules.redisDisconnectedSlaves.duration }}
      labels:
        severity: {{ .rules.redisDisconnectedSlaves.severity }}
        {{- include "redis-alerts.alertLabels" $ | nindent 8 }}
      annotations:
        summary: Redis disconnected slaves (instance {{`{{`}} $labels.pod {{`}}`}})
        description: "Redis not replicating for all slaves. Consider reviewing the redis replication status.\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{- end }}
    
    {{ if (include "redis-alerts.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.diskUsageHigh.enabled .rules.diskUsageHigh.severity)) -}}
    - alert: DiskUsageHigh
      expr: (kubelet_volume_stats_used_bytes{service="kubernetes"} / on(persistentvolumeclaim) group_left(pod) ((kubelet_volume_stats_used_bytes{service="kubernetes"} + on(persistentvolumeclaim) group_left(pod) kube_pod_spec_volumes_persistentvolumeclaims_info{pod=~"{{ $.Release.Name }}-.+$",namespace=~"{{ $.Release.Namespace }}"}) )
        * 100 > {{ .rules.diskUsageHigh.val }}
      for: {{ .rules.diskUsageHigh.duration }}
      labels:
        severity: {{ .rules.diskUsageHigh.severity }}
        {{- include "redis-alerts.alertLabels" $ | nindent 8 }}
      annotations:
        summary: Persistent Volume Usages in instance {{`{{`}} $labels.instance {{`}}`}}
        description: "Persistent Volume Usages\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{- end }}
    {{ if (include "redis-alerts.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.diskAlmostFull.enabled .rules.diskAlmostFull.severity)) -}}
    - alert: DiskAlmostFull
      expr: (kubelet_volume_stats_used_bytes{service="kubernetes"} / on(persistentvolumeclaim) group_left(pod) ((kubelet_volume_stats_used_bytes{service="kubernetes"} + on(persistentvolumeclaim) group_left(pod) kube_pod_spec_volumes_persistentvolumeclaims_info{pod=~"{{ $.Release.Name }}-.+$",namespace=~"{{ $.Release.Namespace }}"}) )
        * 100 > {{ .rules.diskAlmostFull.val }}
      for: {{ .rules.diskAlmostFull.duration }}
      labels:
        severity: {{ .rules.diskAlmostFull.severity }}
        {{- include "redis-alerts.alertLabels" $ | nindent 8 }}
      annotations:
        summary: Persistent Volume Usages in instance {{`{{`}} $labels.instance {{`}}`}}
        description: "Persistent Volume Usages\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{- end }}
  {{end -}}
  {{end -}}


  {{ with .Values.form.alert.groups.provisioner -}}
  {{ if (include "redis-alerts.alertGroupEnabled" (list $.Values.form.alert.enabled .)) -}}
  - name: redis.provisioner.{{ $.Release.Namespace }}.{{ $app }}.rules
    rules:
    {{ if (include "redis-alerts.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.appPhaseNotReady.enabled .rules.appPhaseNotReady.severity)) -}}
    - alert: KubeDBRedisPhaseNotReady
      expr: kubedb_com_redis_status_phase{phase="NotReady",app="{{ $app }}",namespace="{{ $.Release.Namespace }}"} == 1
      for: {{ .rules.appPhaseNotReady.duration }}
      labels:
        severity: {{ .rules.appPhaseNotReady.severity }}
        {{- include "redis-alerts.alertLabels" $ | nindent 8 }}
      annotations:
        summary: KubeDB Redis Phase NotReady (redis {{`{{`}} $labels.redis {{`}}`}})
        description: "KubeDB Redis Phase not ready on {{`{{`}} $labels.redis {{`}}`}}\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "redis-alerts.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.appPhaseCritical.enabled .rules.appPhaseCritical.severity)) -}}
    - alert: KubeDBRedisPhaseCritical
      expr: kubedb_com_redis_status_phase{phase="Critical",app="{{ $app }}",namespace="{{ $.Release.Namespace }}"} == 1
      for: {{ .rules.appPhaseCritical.duration }}
      labels:
        severity: {{ .rules.appPhaseCritical.severity }}
        {{- include "redis-alerts.alertLabels" $ | nindent 8 }}
      annotations:
        summary: KubeDB Redis Phase Critical (redis {{`{{`}} $labels.redis {{`}}`}})
        description: "KubeDB Redis Phase Critical {{`{{`}} $labels.redis {{`}}`}}\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{- end }}
  {{ end -}}
  {{ end -}}


  {{ with .Values.form.alert.groups.opsManager -}}
  {{ if (include "redis-alerts.alertGroupEnabled" (list $.Values.form.alert.enabled .)) -}}
  - name: redis.opsManager.{{ $.Release.Namespace }}.{{ $app }}.rules
    rules:
    {{ if (include "redis-alerts.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.opsRequestOnProgress.enabled .rules.opsRequestOnProgress.severity)) -}}
    - alert: KubeDBRedisOpsRequestOnProgress
      expr: ops_kubedb_com_redisopsrequest_status_phase{phase="Progressing",app="{{ $app }}",namespace="{{ $.Release.Namespace }}"} == 1
      for: {{ .rules.opsRequestOnProgress.duration }}
      labels:
        severity: {{ .rules.opsRequestOnProgress.severity }}
        {{- include "redis-alerts.alertLabels" $ | nindent 8 }}
      annotations:
        summary: RedisOpsRequest on progress (redisopsrequest {{`{{`}} $labels.redisopsrequest {{`}}`}})
        description: "RedisOpsRequest {{`{{`}} $labels.redisopsrequest {{`}}`}} is in progressressing status\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "redis-alerts.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.opsRequestStatusProgressingToLong.enabled .rules.opsRequestStatusProgressingToLong.severity)) -}}
    - alert: KubeDBRedisOpsRequestStatusProgressingToLong
      expr: ops_kubedb_com_redisopsrequest_status_phase{phase="Progressing",app="{{ $app }}",namespace="{{ $.Release.Namespace }}"} == 1
      for: {{ .rules.opsRequestStatusProgressingToLong.duration }}
      labels:
        severity: {{ .rules.opsRequestStatusProgressingToLong.severity }}
        {{- include "redis-alerts.alertLabels" $ | nindent 8 }}
      annotations:
        summary: RedisOpsRequest is in progressing status for too long (redisopsrequest {{`{{`}} $labels.redisopsrequest {{`}}`}})
        description: "RedisOpsRequest {{`{{`}} $labels.redisopsrequest {{`}}`}} is in progressing status for too long\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "redis-alerts.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.opsRequestFailed.enabled .rules.opsRequestFailed.severity)) -}}
    - alert: KubeDBRedisOpsRequestFailed
      expr: ops_kubedb_com_redisopsrequest_status_phase{phase="Failed",app="{{ $app }}",namespace="{{ $.Release.Namespace }}"} == 1
      for: {{ .rules.opsRequestFailed.duration }}
      labels:
        severity: {{ .rules.opsRequestFailed.severity }}
        {{- include "redis-alerts.alertLabels" $ | nindent 8 }}
      annotations:
        summary: RedisOpsRequest failed (redisopsrequest {{`{{`}} $labels.redisopsrequest {{`}}`}})
        description: "RedisOpsRequest {{`{{`}} $labels.redisopsrequest {{`}}`}} failed \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{- end }}
  {{ end -}}
  {{ end -}}


  {{ with .Values.form.alert.groups.stash -}}
  {{ if (include "redis-alerts.alertGroupEnabled" (list $.Values.form.alert.enabled .)) -}}
  - name: redis.stash.{{ $.Release.Namespace }}.{{ $app }}.rules
    rules:
    {{ if (include "redis-alerts.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.backupSessionFailed.enabled .rules.backupSessionFailed.severity)) -}}
    - alert: RedisStashBackupSessionFailed
      expr: stash_backup_session_success * on(invoker_name, invoker_kind) group_left(target_name, target_kind) stash_appscode_com_backupconfiguration_info{target_name="{{ $app }}", target_kind="AppBinding", namespace="{{ $.Release.Namespace }}"} == 0
      for: {{ .rules.backupSessionFailed.duration }}
      labels:
        severity: {{ .rules.backupSessionFailed.severity }}
        {{- include "redis-alerts.alertLabels" $ | nindent 8 }}
      annotations:
        summary: Redis Stash backup session failed (invoker_name {{`{{`}} $labels.invoker_name {{`}}`}})
        description: "Redis Stash backupsession failed {{`{{`}} $labels.invoker_name {{`}}`}} \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "redis-alerts.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.restoreSessionFailed.enabled .rules.restoreSessionFailed.severity)) -}}
    - alert: RedisStashRestoreSessionFailed
      expr: stash_restore_session_success * on(invoker_name, invoker_kind) group_left(target_name, target_kind) stash_appscode_com_restoresession_info{target_name="{{ $app }}", target_kind="AppBinding", namespace="{{ $.Release.Namespace }}"} == 0
      for: {{ .rules.restoreSessionFailed.duration }}
      labels:
        severity: {{ .rules.restoreSessionFailed.severity }}
        {{- include "redis-alerts.alertLabels" $ | nindent 8 }}
      annotations:
        summary: Redis Stash restore session failed (invoker_name {{`{{`}} $labels.invoker_name {{`}}`}})
        description: "Redis Stash restore session failed {{`{{`}} $labels.invoker_name {{`}}`}} \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "redis-alerts.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.noBackupSessionForTooLong.enabled .rules.noBackupSessionForTooLong.severity)) -}}
    - alert: RedisStashNoBackupSessionForTooLong
      expr: time() - stash_backup_last_success_time_seconds + on(invoker_name, invoker_kind) group_left(target_name, target_kind) stash_appscode_com_backupconfiguration_info{target_name="{{ $app }}", target_kind="AppBinding", namespace="{{ $.Release.Namespace }}"} - 1 > {{ .rules.noBackupSessionForTooLong.val }}
      for: {{ .rules.noBackupSessionForTooLong.duration }}
      labels:
        severity: {{ .rules.noBackupSessionForTooLong.severity }}
        {{- include "redis-alerts.alertLabels" $ | nindent 8 }}
      annotations:
        summary: Redis Stash no backup for last {{ .rules.noBackupSessionForTooLong.val }} second (invoker_name {{`{{`}} $labels.invoker_name {{`}}`}})
        description: "Redis Stash no backup for too long {{`{{`}} $labels.invoker_name {{`}}`}} \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "redis-alerts.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.repositoryCorrupted.enabled .rules.repositoryCorrupted.severity)) -}}
    - alert: RedisStashRepositoryCorrupted
      expr: stash_repository_integrity * on(invoker_name, invoker_kind) group_left(target_name, target_kind, repository) stash_appscode_com_backupconfiguration_info{target_name="{{ $app }}", target_kind="AppBinding", namespace="{{ $.Release.Namespace }}"}
      for: {{ .rules.repositoryCorrupted.duration }}
      labels:
        severity: {{ .rules.repositoryCorrupted.severity }}
        {{- include "redis-alerts.alertLabels" $ | nindent 8 }}
      annotations:
        summary: Redis Stash repository corrupted (invoker_name {{`{{`}} $labels.invoker_name {{`}}`}})
        description: "Redis Stash repository corrupted {{`{{`}} $labels.invoker_name {{`}}`}} \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "redis-alerts.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.repositoryStorageRunningLow.enabled .rules.repositoryStorageRunningLow.severity)) -}}
    - alert: RedisStashRepositoryStorageRunningLow
      expr: stash_repository_size_bytes * on(invoker_name, invoker_kind) group_left(target_name, target_kind, repository) stash_appscode_com_backupconfiguration_info{target_name="{{ $app }}", target_kind="AppBinding", namespace="{{ $.Release.Namespace }}"} > {{ .rules.repositoryStorageRunningLow.val }}
      for: {{ .rules.repositoryStorageRunningLow.duration }}
      labels:
        severity: {{ .rules.repositoryStorageRunningLow.severity }}
        {{- include "redis-alerts.alertLabels" $ | nindent 8 }}
      annotations:
        summary: Redis Stash Repository storage more than {{ .rules.repositoryStorageRunningLow.val }} byte. (invoker_name {{`{{`}} $labels.invoker_name {{`}}`}})
        description: "Redis Stash Repository storage running low {{`{{`}} $labels.invoker_name {{`}}`}} \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{- end }}
    {{ if (include "redis-alerts.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.backupSessionPeriodTooLong.enabled .rules.backupSessionPeriodTooLong.severity)) -}}
    - alert: RedisStashBackupSessionPeriodTooLong
      expr: stash_backup_session_duration_seconds * on(invoker_name, invoker_kind) group_left(target_name, target_kind, repository) stash_appscode_com_backupconfiguration_info{target_name="{{ $app }}", target_kind="AppBinding", namespace="{{ $.Release.Namespace }}"} > {{ .rules.backupSessionPeriodTooLong.val }}
      for: {{ .rules.backupSessionPeriodTooLong.duration }}
      labels:
        severity: {{ .rules.backupSessionPeriodTooLong.severity }}
        {{- include "redis-alerts.alertLabels" $ | nindent 8 }}
      annotations:
        summary:  Redis Stash backup session took more than {{ .rules.backupSessionPeriodTooLong.val }} second to complete. (invoker_name {{`{{`}} $labels.invoker_name {{`}}`}})
        description: "Redis Stash backup session taking to long to complete {{`{{`}} $labels.invoker_name {{`}}`}} \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "redis-alerts.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.restoreSessionPeriodTooLong.enabled .rules.restoreSessionPeriodTooLong.severity)) -}}
    - alert: RedisStashRestoreSessionPeriodTooLong
      expr: stash_restore_session_duration_seconds * on(invoker_name, invoker_kind) group_left(target_name, target_kind, repository) stash_appscode_com_restoresession_info{target_name="{{ $app }}", target_kind="AppBinding", namespace="{{ $.Release.Namespace }}"} > {{ .rules.restoreSessionPeriodTooLong.val }}
      for: {{ .rules.restoreSessionPeriodTooLong.duration }}
      labels:
        severity: {{ .rules.restoreSessionPeriodTooLong.severity }}
        {{- include "redis-alerts.alertLabels" $ | nindent 8 }}
      annotations:
        summary:  Redis Stash restore session took more than {{ .rules.restoreSessionPeriodTooLong.val }} second to complete. (invoker_name {{`{{`}} $labels.invoker_name {{`}}`}})
        description: "Redis Stash restore session taking to long to complete {{`{{`}} $labels.invoker_name {{`}}`}} \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{- end }}
  {{ end -}}
  {{ end -}}


  {{ with .Values.form.alert.groups.kubeStash -}}
  {{ if (include "redis-alerts.alertGroupEnabled" (list $.Values.form.alert.enabled .)) -}}
  - name: redis.kubeStash.{{ $.Release.Namespace }}.{{ $app }}.rules
    rules:
    {{ if (include "redis-alerts.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.backupSessionFailed.enabled .rules.backupSessionFailed.severity)) -}}
    - alert: RedisKubeStashBackupSessionFailed
      expr: core_kubestash_com_backupsession_phase{phase="Failed"} * on(backup_invoker_kind, backup_invoker_name) group_left(target_kind, target_name, target_namespace) core_kubestash_com_backupconfiguration_info{target_kind="Redis", target_name="{{ $app }}", target_namespace="{{ $.Release.Namespace }}"} == 1
      for: {{ .rules.backupSessionFailed.duration }}
      labels:
        severity: {{ .rules.backupSessionFailed.severity }}
        {{- include "redis-alerts.alertLabels" $ | nindent 8 }}
      annotations:
        summary: Redis KubeStash backup session failed (invoker_name {{`{{`}} $labels.invoker_name {{`}}`}})
        description: "Redis KubeStash backupsession failed {{`{{`}} $labels.invoker_name {{`}}`}} \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "redis-alerts.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.restoreSessionFailed.enabled .rules.restoreSessionFailed.severity)) -}}
    - alert: RedisKubeStashRestoreSessionFailed
      expr: core_kubestash_com_restoresession_phase{target_kind="Redis", target_name="{{ $app }}", target_namespace="{{ $.Release.Namespace }}", phase="Failed"} == 1
      for: {{ .rules.restoreSessionFailed.duration }}
      labels:
        severity: {{ .rules.restoreSessionFailed.severity }}
        {{- include "redis-alerts.alertLabels" $ | nindent 8 }}
      annotations:
        summary: Redis KubeStash restore session failed (invoker_name {{`{{`}} $labels.invoker_name {{`}}`}})
        description: "Redis KubeStash restore session failed {{`{{`}} $labels.invoker_name {{`}}`}} \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "redis-alerts.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.noBackupSessionForTooLong.enabled .rules.noBackupSessionForTooLong.severity)) -}}
    - alert: RedisKubeStashNoBackupSessionForTooLong
      expr: time() - max(core_kubestash_com_backupsession_created * on(backup_invoker_kind, backup_invoker_name) group_left(target_kind, target_name, target_namespace) core_kubestash_com_backupconfiguration_info{target_kind="Redis", target_name="{{ $app }}", target_namespace="{{ $.Release.Namespace }}"}) > {{ .rules.noBackupSessionForTooLong.val }}
      for: {{ .rules.noBackupSessionForTooLong.duration }}
      labels:
        severity: {{ .rules.noBackupSessionForTooLong.severity }}
        {{- include "redis-alerts.alertLabels" $ | nindent 8 }}
      annotations:
        summary: Redis KubeStash no backup for last {{ .rules.noBackupSessionForTooLong.val }} second (invoker_name {{`{{`}} $labels.invoker_name {{`}}`}})
        description: "Redis KubeStash no backup for too long {{`{{`}} $labels.invoker_name {{`}}`}} \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "redis-alerts.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.repositoryCorrupted.enabled .rules.repositoryCorrupted.severity)) -}}
    - alert: RedisKubeStashRepositoryCorrupted
      expr: storage_kubestash_com_repository_info{target_kind="Redis", target_name="{{ $app }}", target_namespace="{{ $.Release.Namespace }}", integrity="false"} == 1
      for: {{ .rules.repositoryCorrupted.duration }}
      labels:
        severity: {{ .rules.repositoryCorrupted.severity }}
        {{- include "redis-alerts.alertLabels" $ | nindent 8 }}
      annotations:
        summary: Redis KubeStash repository corrupted (invoker_name {{`{{`}} $labels.invoker_name {{`}}`}})
        description: "Redis KubeStash repository corrupted {{`{{`}} $labels.invoker_name {{`}}`}} \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "redis-alerts.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.repositoryStorageRunningLow.enabled .rules.repositoryStorageRunningLow.severity)) -}}
    - alert: RedisKubeStashRepositoryStorageRunningLow
      expr: storage_kubestash_com_repository_size_bytes{target_kind="Redis", target_name="{{ $app }}", target_namespace="{{ $.Release.Namespace }}"} > {{ .rules.repositoryStorageRunningLow.val }}
      for: {{ .rules.repositoryStorageRunningLow.duration }}
      labels:
        severity: {{ .rules.repositoryStorageRunningLow.severity }}
        {{- include "redis-alerts.alertLabels" $ | nindent 8 }}
      annotations:
        summary: Redis KubeStash Repository storage more than {{ .rules.repositoryStorageRunningLow.val }} byte. (invoker_name {{`{{`}} $labels.invoker_name {{`}}`}})
        description: "Redis KubeStash Repository storage running low {{`{{`}} $labels.invoker_name {{`}}`}} \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{- end }}
    {{ if (include "redis-alerts.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.backupSessionPeriodTooLong.enabled .rules.backupSessionPeriodTooLong.severity)) -}}
    - alert: RedisKubeStashBackupSessionPeriodTooLong
      expr: core_kubestash_com_backupsession_duration_seconds * on(backup_invoker_kind, backup_invoker_name) group_left(target_kind, target_name, target_namespace) core_kubestash_com_backupconfiguration_info{target_kind="Redis", target_name="{{ $app }}", target_namespace="{{ $.Release.Namespace }}"} > {{ .rules.backupSessionPeriodTooLong.val }}
      for: {{ .rules.backupSessionPeriodTooLong.duration }}
      labels:
        severity: {{ .rules.backupSessionPeriodTooLong.severity }}
        {{- include "redis-alerts.alertLabels" $ | nindent 8 }}
      annotations:
        summary:  Redis KubeStash backup session took more than {{ .rules.backupSessionPeriodTooLong.val }} second to complete. (invoker_name {{`{{`}} $labels.invoker_name {{`}}`}})
        description: "Redis KubeStash backup session taking to long to complete {{`{{`}} $labels.invoker_name {{`}}`}} \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "redis-alerts.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.restoreSessionPeriodTooLong.enabled .rules.restoreSessionPeriodTooLong.severity)) -}}
    - alert: RedisKubeStashRestoreSessionPeriodTooLong
      expr: core_kubestash_com_restoresession_duration_seconds{target_kind="Redis", target_name="{{ $app }}", target_namespace="{{ $.Release.Namespace }}"} > {{ .rules.restoreSessionPeriodTooLong.val }}
      for: {{ .rules.restoreSessionPeriodTooLong.duration }}
      labels:
        severity: {{ .rules.restoreSessionPeriodTooLong.severity }}
        {{- include "redis-alerts.alertLabels" $ | nindent 8 }}
      annotations:
        summary:  Redis KubeStash restore session took more than {{ .rules.restoreSessionPeriodTooLong.val }} second to complete. (invoker_name {{`{{`}} $labels.invoker_name {{`}}`}})
        description: "Redis KubeStash restore session taking to long to complete {{`{{`}} $labels.invoker_name {{`}}`}} \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{- end }}
  {{ end -}}
  {{ end -}}


{{ end }}
